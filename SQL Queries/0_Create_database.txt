CREATE TABLE Movies (
    movieID INT PRIMARY KEY,
    title VARCHAR(255) NOT NULL
);
CREATE TABLE MoviesGenres (
    movieID INT,
    genre VARCHAR(255),
    PRIMARY KEY (movieID, genre),
    FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE
);

CREATE TABLE Likes (
    userID VARCHAR(8),
    movieID INT,
    PRIMARY KEY (userID, movieID),
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE
);

CREATE TABLE Users (
    userID VARCHAR(8) PRIMARY KEY,
    password VARCHAR(8) NOT NULL
);

CREATE TABLE Ratings (
    movieID INT,
    userID INT,
    rating DECIMAL(2, 1) /*CHECK (rating >= 0.0 AND rating <= 5.0)*/,
    /*timestamp TIMESTAMP,*/
    PRIMARY KEY (movieID, userID)
    /*FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE*/
);
CREATE TABLE MoviesSupplement (
    imdb_id VARCHAR(10) PRIMARY KEY,
    release_year INT CHECK (release_year >= 1800),
    director VARCHAR(255),
    language VARCHAR(50),
    poster_link VARCHAR(500)
);
CREATE TABLE GenomeTags (
    tagID INT PRIMARY KEY,
    tag VARCHAR(100) NOT NULL
);
CREATE TABLE GenomeScores (
    movieID INT,
    tagID INT,
    relevance DECIMAL(3, 2) CHECK (relevance >= 0.0 AND relevance <= 1.0),
    PRIMARY KEY (movieID, tagID),
    FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE,
    FOREIGN KEY (tagID) REFERENCES GenomeTags(tagID) ON DELETE CASCADE
);
CREATE TABLE Links (
    movieID INT PRIMARY KEY,
    imdb_id VARCHAR(10),
    tmdbId VARCHAR(10),
    FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE,
    FOREIGN KEY (imdb_id) REFERENCES MoviesSupplement(imdb_id) ON DELETE CASCADE
);

ALTER TABLE ratings
ADD CONSTRAINT fk_movie FOREIGN KEY (movieID)
REFERENCES Movies (movieID);

FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE




/*
Schema
Movies(movieID, title)
MoviesGenres(movieID, genre)
Ratings(movieID, userID, rating, timestamp)
MoviesSupplement(imdb_id, release_year, director, language, poster_link)
GenomeScores(movieID, tagID, relevance)
GenomeTags(tagID, tag)
Users(userID, password)
Like(userID, movieID)
Links(movieID, imdb_id)
*/

/*3.1 Home Page
Display the top 10 highest-rated movies with names and posters
Filter by genre: Users can select a genre to display the top 10 highest-rated movies for that specific genre
Quick access links to: Login/Signup page, My List page, Recommendations page, Search page
*/
CREATE TABLE MovieRatings AS
    SELECT
        movieid,
        ROUND(AVG(rating), 3) AS average_rating,
        count(*) as n_rating
    FROM ratings
    GROUP BY movieid ;

/*Top 10 overall*/
WITH rankratings AS(
    SELECT
        m.movieID,
        mr.average_rating,
        mr.n_rating
    FROM
        movies as m
    LEFT JOIN
        MovieRatings as mr ON m.movieID=mr.movieID
    WHERE average_rating IS NOT NULL
    ORDER BY
        mr.average_rating DESC)
SELECT
    rr.*,
    m.title
FROM rankratings as rr
LEFT JOIN
    movies as m ON rr.movieID=m.movieID
/*restrict to popular movies only*/
WHERE rr.n_rating >=100
ORDER BY average_rating DESC
LIMIT 10;

/*Top 10 by genre*/
WITH rankratings AS(
    SELECT
        mg.movieID,
        mg.genre,
        mr.average_rating,
        mr.n_rating
    FROM
        Moviesgenres as mg
    LEFT JOIN
        MovieRatings as mr ON mg.movieID=mr.movieID
    WHERE mg.genre in ('Comedy') AND average_rating IS NOT NULL
    ORDER BY
        mr.average_rating DESC)
SELECT
    rr.*,
    m.title
FROM rankratings as rr
LEFT JOIN
    movies as m ON rr.movieID=m.movieID
/*restrict to popular movies only*/
WHERE rr.n_rating >=100
ORDER BY average_rating DESC
LIMIT 10;

/*
3.2 Login/Signup Page
Create an account: User enters a unique user ID and password to sign up
Login: Users log in with their user ID and password
Error handling for invalid login attempts (e.g., incorrect password, non-existent user)
After login, users can access personalized features like "Liking" movies
*/
INSERT INTO Users (userID, password)
VALUES ('Group15', 'Grp15pw');
/*RETURNING userID;*/


/*
3.3 Account Page
Display user ID
Update password: Users can change their current password
Save changes after updating the password
*/
UPDATE Users
SET password = 'Grp15pw2'
WHERE userID = 'Group15';

/*
3.4 My List Page
Display liked movies of the logged-in user
Access movie details: Users can click on a movie to go to the Movie Details Page
*/
INSERT INTO likes (userID, movieid)
VALUES ('Group15', '1'),
       ('Group15', '2'),
       ('Group15', '3'),
       ('Group15', '4'),
       ('Group15', '5'),
       ('Group15', '6'),
       ('Group15', '7'),
       ('Group15', '8'),
       ('Group15', '9'),
       ('Group15', '10');
SELECT
    m.title,
    ms.poster_link,
FROM
    Movies m
LEFT JOIN
    MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
LEFT JOIN
    Movieratings mr ON m.movieID = mr.movieID
WHERE
    m.movieID in
    (SELECT movieid FROM likes)
ORDER BY movieID;
/*
3.5 Recommendation Page
Display personal movie recommendations based on movies the user has liked (via directors, genres, or tags)
Integrate GenomeScores (optional) for tag-based recommendations for more refined suggestions
Access movie details of recommended movies
*/

/*Logic: find top 3 genres in likes and find the top 10 rated movies in those genres */
WITH TopGenres AS (
    SELECT mg.genre
    FROM Likes l
    JOIN MoviesGenres mg ON l.movieID = mg.movieID
    WHERE l.userID = 'Group15'
    GROUP BY mg.genre
    ORDER BY COUNT(*) DESC
    LIMIT 3
)
SELECT m.movieID, m.title, mg.genre, mr.average_rating,mr.n_rating
FROM Movies m
JOIN MoviesGenres mg ON m.movieID = mg.movieID
JOIN TopGenres tg ON mg.genre = tg.genre
JOIN MovieRatings mr ON m.movieID = mr.movieID
WHERE m.movieID NOT IN (
    SELECT movieID FROM Likes WHERE userID = 'Group15'
)
AND n_rating>1000
ORDER BY average_rating DESC
LIMIT 10;
;

/*Logic: find top 3 directors in likes and find the top 10 rated movies directed by those directors. */
WITH TopDirectors AS (
    SELECT ms.director
    FROM Likes l
    JOIN Movies m ON l.movieID = m.movieID
    JOIN MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
    WHERE l.userID = 'Group15'
    GROUP BY ms.director
    ORDER BY COUNT(*) DESC
    LIMIT 3
)
SELECT m.movieID, m.title, ms.director, mr.average_rating, mr.n_rating
FROM Movies m
JOIN MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
JOIN TopDirectors td ON ms.director = td.director
JOIN MovieRatings mr ON m.movieID = mr.movieID
WHERE m.movieID NOT IN (
    SELECT movieID FROM Likes WHERE userID = 'Group15'
)
/*AND mr.n_rating > 1000*/
ORDER BY mr.average_rating DESC
LIMIT 10;

/*based on movie tags from likes, create recommendations */
/*find tags in liked movies, rank by frequency*/
/*NOTE: only keep relevance >= 0.1*/
WITH top_tags as (
SELECT tag,tagid,count(*) as n_liked_tags
FROM (
    SELECT
        l.*,
        gs.tagid,
        gs.relevance,
        gt.tag
    FROM likes l
    LEFT JOIN genomescores gs ON l.movieID=gs.movieID
    LEFT JOIN genometags gt ON gs.tagid=gt.tagid
    WHERE relevance>=0.5 /*we can change this threshold*/
    ORDER BY l.movieID,gs.relevance DESC) ttt
GROUP BY tag,tagid
ORDER BY n_liked_tags DESC
LIMIT 10)
SELECT gs.movieID,m.movieID, m.title, mr.average_rating, mr.n_rating
FROM (SELECT DISTINCT movieID FROM genomescores WHERE relevance>0.5 and tagid
        IN (SELECT tagid FROM top_tags)) gs
JOIN Movies m ON gs.movieid=m.movieid
JOIN MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
JOIN MovieRatings mr ON m.movieID = mr.movieID
WHERE m.movieID NOT IN (
    SELECT movieID FROM Likes WHERE userID = 'Group15'
)
/*AND mr.n_rating > 1000*/
ORDER BY mr.average_rating DESC
LIMIT 10;
/*
3.6 Movie Search Page
Search movies by title/tag, genre, director, language, or release year
Sort results by rating, release year, or relevance (optional)
*/
SELECT m.movieID, m.title, ms.release_year, ms.director, ms.language, mr.average_rating
FROM Movies m
JOIN MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
LEFT JOIN MoviesGenres mg ON m.movieID = mg.movieID
LEFT JOIN GenomeScores gs ON m.movieID = gs.movieID
LEFT JOIN GenomeTags gt ON gs.tagID = gt.tagID
LEFT JOIN movieratings mr ON m.movieID = mr.movieID
WHERE (m.title ILIKE '%search_term%' OR
       gt.tag ILIKE '%search_term%' OR
       mg.genre ILIKE '%Comedy%' OR
       ms.director ILIKE '%search_term%' OR
       ms.language ILIKE '%search_term%' OR
       ms.release_year = '1988')
ORDER BY average_rating DESC, ms.release_year DESC;
/*
3.7 Movie Details Page
Display comprehensive movie details, including title, average rating, release year, director, language, genre, and poster picture
Like functionality: Logged-in users can "like" a movie, adding it to their My List
Access similar movies (optional): Suggest related movies based on genres, directors, or tags

 */
 SELECT
    m.movieID,
    m.title,
    ms.release_year,
    ms.director,
    ms.language,
    mg.genre,
    ms.poster_link,
    mr.average_rating
FROM Movies m
JOIN MoviesSupplement ms ON m.movieID = CAST(ms.imdb_id AS INT)
JOIN MoviesGenres mg ON m.movieID = mg.movieID
JOIN MovieRatings mr ON m.movieID = mr.movieID
ORDER BY average_rating DESC;