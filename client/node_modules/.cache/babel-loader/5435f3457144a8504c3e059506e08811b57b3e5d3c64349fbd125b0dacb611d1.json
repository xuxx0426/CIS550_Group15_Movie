{"ast":null,"code":"var _jsxFileName = \"/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Container, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function HomePage() {\n  _s();\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']); // Example genres\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = genre => {\n    const route = genre === 'All' ? `${config.server_host}:${config.server_port}/top10movies` : `${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n    console.log(`Fetching movies from: ${route}`);\n    fetch(route).then(res => res.json()).then(data => {\n      setTopMovies(data);\n      setError(null);\n    }).catch(err => {\n      setError('Error fetching movies');\n      console.error(err);\n    });\n  };\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    fetchMovies(selectedGenre);\n  }, [selectedGenre]);\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      gutterBottom: true,\n      align: \"center\",\n      sx: {\n        mt: 4\n      },\n      children: \"Discover Your Next Favorite Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Explore top-rated movies and personalized recommendations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: selectedGenre,\n      onChange: handleGenreChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      sx: {\n        mt: 4\n      },\n      children: genres.map(genre => /*#__PURE__*/_jsxDEV(Tab, {\n        label: genre,\n        value: genre\n      }, genre, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      sx: {\n        mt: 4\n      },\n      children: [\"Top 10 Movies \", selectedGenre !== 'All' && `in ${selectedGenre}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        mb: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: topMovies.length > 0 ? topMovies.map(movie => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"300\",\n            image: movie.poster_link || '/placeholder.png' // Placeholder if no poster link\n            ,\n            alt: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Rating: \", movie.average_rating.toFixed(1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, movie.movieID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: error || 'Loading top movies...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"U5deHJDE8c7Ujl3lPS3FFCE/Lwg=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useEffect","useState","Container","Divider","Tab","Tabs","Typography","Grid","Card","CardMedia","CardContent","jsxDEV","_jsxDEV","config","require","HomePage","_s","topMovies","setTopMovies","genres","setGenres","selectedGenre","setSelectedGenre","error","setError","fetchMovies","genre","route","server_host","server_port","console","log","fetch","then","res","json","data","catch","err","handleGenreChange","event","newValue","children","variant","gutterBottom","align","sx","mt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","indicatorColor","textColor","scrollButtons","map","label","mb","container","spacing","length","movie","item","xs","sm","md","component","height","image","poster_link","alt","title","color","average_rating","toFixed","movieID","_c","$RefreshReg$"],"sources":["/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Container, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nconst config = require('../config.json');\n\nexport default function HomePage() {\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']); // Example genres\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = (genre) => {\n    const route =\n      genre === 'All'\n        ? `${config.server_host}:${config.server_port}/top10movies`\n        : `${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n    console.log(`Fetching movies from: ${route}`);\n\n\n    fetch(route)\n      .then((res) => res.json())\n      .then((data) => {\n        setTopMovies(data);\n        setError(null);\n      })\n      .catch((err) => {\n        setError('Error fetching movies');\n        console.error(err);\n      });\n  };\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    fetchMovies(selectedGenre);\n  }, [selectedGenre]);\n\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n\n  return (\n    <Container>\n      {/* Hero Section */}\n      <Typography variant=\"h3\" gutterBottom align=\"center\" sx={{ mt: 4 }}>\n        Discover Your Next Favorite Movie\n      </Typography>\n      <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n        Explore top-rated movies and personalized recommendations.\n      </Typography>\n\n      {/* Genre Tabs */}\n      <Tabs\n        value={selectedGenre}\n        onChange={handleGenreChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        sx={{ mt: 4 }}\n      >\n        {genres.map((genre) => (\n          <Tab key={genre} label={genre} value={genre} />\n        ))}\n      </Tabs>\n\n      {/* Top Movies Section */}\n      <Typography variant=\"h4\" gutterBottom sx={{ mt: 4 }}>\n        Top 10 Movies {selectedGenre !== 'All' && `in ${selectedGenre}`}\n      </Typography>\n      <Divider sx={{ mb: 2 }} />\n      <Grid container spacing={3}>\n        {topMovies.length > 0 ? (\n          topMovies.map((movie) => (\n            <Grid item xs={12} sm={6} md={4} key={movie.movieID}>\n              <Card>\n                <CardMedia\n                  component=\"img\"\n                  height=\"300\"\n                  image={movie.poster_link || '/placeholder.png'} // Placeholder if no poster link\n                  alt={movie.title}\n                />\n                <CardContent>\n                  <Typography variant=\"h6\">{movie.title}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Rating: {movie.average_rating.toFixed(1)}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))\n        ) : (\n          <Typography>{error || 'Loading top movies...'}</Typography>\n        )}\n      </Grid>\n    </Container>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}