{"ast":null,"code":"var _jsxFileName = \"/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Box, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function HomePage() {\n  _s();\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']);\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const scrollableContainerRef = useRef(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = async genre => {\n    const route = genre === 'All' ? `http://${config.server_host}:${config.server_port}/top10movies` : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n    try {\n      const response = await fetch(route);\n      if (!response.ok) {\n        throw new Error('Error fetching movies');\n      }\n      const data = await response.json();\n\n      // Validate that the response is an array\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid data format: Expected an array.');\n      }\n\n      // Fetch posters for each movie\n      const moviesWithPosters = await Promise.all(data.map(async movie => {\n        if (movie.tmdbid) {\n          try {\n            const tmdbResponse = await fetch(`https://api.themoviedb.org/3/movie/${Math.trunc(movie.tmdbid)}?api_key=${config.TMDB_API_KEY}`);\n            const tmdbData = await tmdbResponse.json();\n            if (tmdbData.poster_path) {\n              movie.poster_link = `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}`;\n            }\n          } catch (err) {\n            console.log(`Error fetching poster for TMDB ID ${movie.tmdbid}:`, err);\n          }\n        }\n        return movie;\n      }));\n      setTopMovies(moviesWithPosters);\n      setError(null);\n    } catch (err) {\n      setError('Error fetching movies');\n      console.error(err);\n    }\n    ;\n  };\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    setTopMovies([]); // Clear previous state\n    fetchMovies(selectedGenre);\n\n    // Reset scroll position to the start\n    if (scrollableContainerRef.current) {\n      scrollableContainerRef.current.scrollLeft = 0;\n    }\n  }, [selectedGenre]);\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n  const handleCardClick = movieID => {\n    navigate(`/movie/${movieID}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundImage: 'url(https://images.unsplash.com/photo-1615383915140-a893a0e95d32?q=80&w=2045&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      minHeight: '100vh',\n      color: 'LightSlateGray',\n      padding: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        align: \"center\",\n        sx: {\n          mt: 4\n        },\n        children: \"Discover Your Next Favorite Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        align: \"center\",\n        gutterBottom: true,\n        children: \"Explore top-rated movies and personalized recommendations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: selectedGenre,\n        onChange: handleGenreChange,\n        indicatorColor: \"primary\",\n        variant: \"scrollable\",\n        scrollButtons: \"auto\",\n        sx: {\n          mt: 4,\n          color: 'darkgrey',\n          // Default tab color\n          '& .MuiTab-root': {\n            color: 'darkgrey',\n            // Inactive tab color\n            '&.Mui-selected': {\n              color: 'white',\n              // Active tab color\n              fontWeight: 'bold' // Bold for the selected tab\n            }\n          },\n          '& .MuiTabs-indicator': {\n            backgroundColor: 'white' // Indicator color\n          }\n        },\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(Tab, {\n          label: genre,\n          value: genre\n        }, genre, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        sx: {\n          mt: 4\n        },\n        children: [\"Top 10 Movies \", selectedGenre !== 'All' && `in ${selectedGenre}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ref: scrollableContainerRef,\n        sx: {\n          display: 'flex',\n          overflowX: 'auto',\n          gap: 2,\n          padding: 2,\n          '&::-webkit-scrollbar': {\n            display: 'one'\n          }\n        },\n        children: topMovies.length > 0 ? topMovies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            minWidth: 300,\n            cursor: 'pointer'\n          },\n          onClick: () => handleCardClick(movie.movieid),\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"300\",\n            image: movie.poster_link || 'https://media.istockphoto.com/id/1396814518/vector/image-coming-soon-no-photo-no-thumbnail-image-available-vector-illustration.jpg?s=612x612&w=0&k=20&c=hnh2OZgQGhf0b46-J2z7aHbIWwq8HNlSDaNp2wn_iko=' // Placeholder if no poster link\n            ,\n            alt: movie.title,\n            sx: {\n              objectFit: 'cover',\n              // Ensures the poster covers the container without distortion\n              width: '100%' // Make sure the width fits the container\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                borderRadius: '5px',\n                textAlign: 'center'\n              },\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                borderRadius: '5px',\n                textAlign: 'center'\n              },\n              children: [\"Rating: \", movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)]\n        }, movie.movieid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: error || 'Loading top movies...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"pIe4SMOpQRMuZViYgQqNMWUQcr4=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useEffect","useState","useRef","useNavigate","Container","Box","Divider","Tab","Tabs","Typography","Grid","Card","CardMedia","CardContent","jsxDEV","_jsxDEV","config","require","HomePage","_s","topMovies","setTopMovies","genres","setGenres","selectedGenre","setSelectedGenre","error","setError","navigate","scrollableContainerRef","fetchMovies","genre","route","server_host","server_port","response","fetch","ok","Error","data","json","Array","isArray","moviesWithPosters","Promise","all","map","movie","tmdbid","tmdbResponse","Math","trunc","TMDB_API_KEY","tmdbData","poster_path","poster_link","err","console","log","current","scrollLeft","handleGenreChange","event","newValue","handleCardClick","movieID","sx","backgroundImage","backgroundSize","backgroundPosition","minHeight","color","padding","children","variant","gutterBottom","align","mt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","indicatorColor","scrollButtons","fontWeight","backgroundColor","label","ref","display","overflowX","gap","length","minWidth","cursor","onClick","movieid","component","height","image","alt","title","objectFit","width","borderRadius","textAlign","average_rating","parseFloat","toFixed","_c","$RefreshReg$"],"sources":["/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Box, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nconst config = require('../config.json');\n\nexport default function HomePage() {\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']);\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const scrollableContainerRef = useRef(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = async (genre) => {\n    const route =\n      genre === 'All'\n        ? `http://${config.server_host}:${config.server_port}/top10movies`\n        : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n\n    try {\n      const response = await fetch(route);\n\n      if (!response.ok) {\n        throw new Error('Error fetching movies');\n      }\n      const data = await response.json();\n\n      // Validate that the response is an array\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid data format: Expected an array.');\n      }\n\n      // Fetch posters for each movie\n      const moviesWithPosters = await Promise.all(\n        data.map(async (movie) => {\n          if (movie.tmdbid) {\n            try {\n              const tmdbResponse = await fetch(\n                `https://api.themoviedb.org/3/movie/${Math.trunc(movie.tmdbid)}?api_key=${config.TMDB_API_KEY}`\n              );\n              const tmdbData = await tmdbResponse.json();\n\n              if (tmdbData.poster_path) {\n                movie.poster_link = `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}`;\n              }\n            } catch (err) {\n              console.log(`Error fetching poster for TMDB ID ${movie.tmdbid}:`, err);\n            }\n          }\n          return movie;\n        })\n      );\n      setTopMovies(moviesWithPosters);\n      setError(null);\n    } catch (err) {\n      setError('Error fetching movies');\n      console.error(err);\n    };\n  }\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    setTopMovies([]); // Clear previous state\n    fetchMovies(selectedGenre);\n\n    // Reset scroll position to the start\n    if (scrollableContainerRef.current) {\n      scrollableContainerRef.current.scrollLeft = 0;\n    }\n  }, [selectedGenre]);\n\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n\n  const handleCardClick = (movieID) => {\n    navigate(`/movie/${movieID}`);\n  };\n\n  return (\n    <Box\n      sx={{\n        backgroundImage: 'url(https://images.unsplash.com/photo-1615383915140-a893a0e95d32?q=80&w=2045&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        minHeight: '100vh',\n        color: 'LightSlateGray',\n        padding: 4,\n      }}\n    >\n      <Container>\n        {/* Hero Section */}\n        <Typography variant=\"h3\" gutterBottom align=\"center\" sx={{ mt: 4 }}>\n          Discover Your Next Favorite Movie\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n          Explore top-rated movies and personalized recommendations.\n        </Typography>\n\n        {/* Genre Tabs */}\n        <Tabs\n          value={selectedGenre}\n          onChange={handleGenreChange}\n          indicatorColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          sx={{\n            mt: 4,\n            color: 'darkgrey', // Default tab color\n            '& .MuiTab-root': {\n              color: 'darkgrey', // Inactive tab color\n              '&.Mui-selected': {\n                color: 'white', // Active tab color\n                fontWeight: 'bold', // Bold for the selected tab\n              },\n            },\n            '& .MuiTabs-indicator': {\n              backgroundColor: 'white', // Indicator color\n            },\n          }}\n        >\n          {genres.map((genre) => (\n            <Tab key={genre} label={genre} value={genre} />\n          ))}\n        </Tabs>\n\n        {/* Horizontal Scrollable Movies Section */}\n        <Typography variant=\"h4\" gutterBottom sx={{ mt: 4 }}>\n          Top 10 Movies {selectedGenre !== 'All' && `in ${selectedGenre}`}\n        </Typography>\n        <Box\n          ref={scrollableContainerRef}\n          sx={{\n            display: 'flex',\n            overflowX: 'auto',\n            gap: 2,\n            padding: 2,\n            '&::-webkit-scrollbar': {\n              display: 'one',\n            },\n          }}\n        >\n          {topMovies.length > 0 ? (\n            topMovies.map((movie) => (\n              <Card\n                key={movie.movieid}\n                sx={{\n                  minWidth: 300,\n                  cursor: 'pointer',\n                }}\n                onClick={() => handleCardClick(movie.movieid)}\n              >\n                {/* Movie Poster */}\n                <CardMedia\n                  component=\"img\"\n                  height=\"300\"\n                  image={movie.poster_link || 'https://media.istockphoto.com/id/1396814518/vector/image-coming-soon-no-photo-no-thumbnail-image-available-vector-illustration.jpg?s=612x612&w=0&k=20&c=hnh2OZgQGhf0b46-J2z7aHbIWwq8HNlSDaNp2wn_iko='} // Placeholder if no poster link\n                  alt={movie.title}\n                  sx={{\n                    objectFit: 'cover', // Ensures the poster covers the container without distortion\n                    width: '100%', // Make sure the width fits the container\n                  }}\n                />\n\n                <CardContent>\n                  <Typography variant=\"h6\"\n                    sx={{ borderRadius: '5px', textAlign: 'center' }}>{movie.title}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\"\n                    sx={{ borderRadius: '5px', textAlign: 'center' }}>\n                    Rating: {movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A'}\n                  </Typography>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Typography>{error || 'Loading top movies...'}</Typography>\n          )}\n        </Box>\n      </Container>\n    </Box>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}