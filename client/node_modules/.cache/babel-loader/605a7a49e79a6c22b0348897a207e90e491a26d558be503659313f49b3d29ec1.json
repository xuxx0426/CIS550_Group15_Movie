{"ast":null,"code":"var _jsxFileName = \"/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Container, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function HomePage() {\n  _s();\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']); // Example genres\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = genre => {\n    const route = genre === 'All' ? `http://${config.server_host}:${config.server_port}/top10movies` : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n    fetch(route).then(res => res.json()).then(data => {\n      setTopMovies(data);\n      setError(null);\n    }).catch(err => {\n      setError('Error fetching movies');\n      console.error(err);\n    });\n  };\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    fetchMovies(selectedGenre);\n  }, [selectedGenre]);\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      gutterBottom: true,\n      align: \"center\",\n      sx: {\n        mt: 4\n      },\n      children: \"Discover Your Next Favorite Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Explore top-rated movies and personalized recommendations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: selectedGenre,\n      onChange: handleGenreChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      sx: {\n        mt: 4\n      },\n      children: genres.map(genre => /*#__PURE__*/_jsxDEV(Tab, {\n        label: genre,\n        value: genre\n      }, genre, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      sx: {\n        mt: 4\n      },\n      children: [\"Top 10 Movies \", selectedGenre !== 'All' && `in ${selectedGenre}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        overflowX: 'auto',\n        gap: 2,\n        padding: 2,\n        '&::-webkit-scrollbar': {\n          display: 'none' // Hide scrollbar for a cleaner look\n        }\n      },\n      children: topMovies.length > 0 ? topMovies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          minWidth: 200,\n          flexShrink: 0 // Prevent cards from shrinking in the flex container\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          component: \"img\",\n          height: \"300\",\n          image: movie.poster_link || '/placeholder.png' // Placeholder if no poster link\n          ,\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"Rating: \", movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)]\n      }, movie.movieID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: error || 'Loading top movies...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"U5deHJDE8c7Ujl3lPS3FFCE/Lwg=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useEffect","useState","Container","Divider","Tab","Tabs","Typography","Grid","Card","CardMedia","CardContent","jsxDEV","_jsxDEV","config","require","HomePage","_s","topMovies","setTopMovies","genres","setGenres","selectedGenre","setSelectedGenre","error","setError","fetchMovies","genre","route","server_host","server_port","fetch","then","res","json","data","catch","err","console","handleGenreChange","event","newValue","children","variant","gutterBottom","align","sx","mt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","indicatorColor","textColor","scrollButtons","map","label","Box","display","overflowX","gap","padding","length","movie","minWidth","flexShrink","component","height","image","poster_link","alt","title","color","average_rating","parseFloat","toFixed","movieID","_c","$RefreshReg$"],"sources":["/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Container, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nconst config = require('../config.json');\n\nexport default function HomePage() {\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']); // Example genres\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = (genre) => {\n    const route =\n      genre === 'All'\n        ? `http://${config.server_host}:${config.server_port}/top10movies`\n        : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n\n    fetch(route)\n      .then((res) => res.json())\n      .then((data) => {\n        setTopMovies(data);\n        setError(null);\n      })\n      .catch((err) => {\n        setError('Error fetching movies');\n        console.error(err);\n      });\n  };\n\n  // Fetch movies on component mount or when the selected genre changes\n  useEffect(() => {\n    fetchMovies(selectedGenre);\n  }, [selectedGenre]);\n\n  const handleGenreChange = (event, newValue) => {\n    setSelectedGenre(newValue);\n  };\n\n  return (\n    <Container>\n      {/* Hero Section */}\n      <Typography variant=\"h3\" gutterBottom align=\"center\" sx={{ mt: 4 }}>\n        Discover Your Next Favorite Movie\n      </Typography>\n      <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n        Explore top-rated movies and personalized recommendations.\n      </Typography>\n\n      {/* Genre Tabs */}\n      <Tabs\n        value={selectedGenre}\n        onChange={handleGenreChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        sx={{ mt: 4 }}\n      >\n        {genres.map((genre) => (\n          <Tab key={genre} label={genre} value={genre} />\n        ))}\n      </Tabs>\n\n      {/* Horizontal Scrollable Movies Section */}\n      <Typography variant=\"h4\" gutterBottom sx={{ mt: 4 }}>\n        Top 10 Movies {selectedGenre !== 'All' && `in ${selectedGenre}`}\n      </Typography>\n      <Box\n        sx={{\n          display: 'flex',\n          overflowX: 'auto',\n          gap: 2,\n          padding: 2,\n          '&::-webkit-scrollbar': {\n            display: 'none', // Hide scrollbar for a cleaner look\n          },\n        }}\n      >\n        {topMovies.length > 0 ? (\n          topMovies.map((movie) => (\n            <Card\n              key={movie.movieID}\n              sx={{\n                minWidth: 200,\n                flexShrink: 0, // Prevent cards from shrinking in the flex container\n              }}\n            >\n              <CardMedia\n                component=\"img\"\n                height=\"300\"\n                image={movie.poster_link || '/placeholder.png'} // Placeholder if no poster link\n                alt={movie.title}\n              />\n              <CardContent>\n                <Typography variant=\"h6\">{movie.title}</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Rating: {movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A'}\n                </Typography>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Typography>{error || 'Loading top movies...'}</Typography>\n        )}\n      </Box>\n    </Container>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}