{"ast":null,"code":"var _jsxFileName = \"/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Box, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function HomePage() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']);\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const scrollableContainerRef = useRef(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = async genre => {\n    _s();\n    const route = genre === 'All' ? `http://${config.server_host}:${config.server_port}/top10movies` : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n    try {\n      const response = await fetch(route);\n      const data = response.json();\n      if (!response.ok) {\n        throw new Error('Error fetching movies');\n      }\n\n      // Fetch posters for each movie\n      const moviesWithPosters = await Promise.all(data.map(async movie => {\n        if (movie.tmdbid) {\n          try {\n            const tmdbResponse = await fetch(`https://api.themoviedb.org/3/movie/${Math.trunc(movie.tmdbid)}?api_key=${config.TMDB_API_KEY}`);\n            const tmdbData = await tmdbResponse.json();\n            if (tmdbData.poster_path) {\n              movie.poster_link = `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}`;\n            }\n          } catch (err) {\n            console.log(`Error fetching poster for TMDB ID ${movie.tmdbid}:`, err);\n          }\n        }\n        return movie;\n      }));\n      setTopMovies(moviesWithPosters);\n      setError(null);\n    } catch (err) {\n      setError('Error fetching movies');\n      console.error(err);\n    }\n\n    // Fetch movies on component mount or when the selected genre changes\n    useEffect(() => {\n      fetchMovies(selectedGenre);\n      // Reset scroll position to the start\n      if (scrollableContainerRef.current) {\n        scrollableContainerRef.current.scrollLeft = 0;\n      }\n    }, [selectedGenre]);\n    const handleGenreChange = (event, newValue) => {\n      setSelectedGenre(newValue);\n    };\n    const handleCardClick = movieID => {\n      navigate(`/movie/${movieID}`);\n    };\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundImage: 'url(https://images.unsplash.com/photo-1615383915140-a893a0e95d32?q=80&w=2045&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        minHeight: '100vh',\n        color: 'white',\n        padding: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          gutterBottom: true,\n          align: \"center\",\n          sx: {\n            mt: 4\n          },\n          children: \"Discover Your Next Favorite Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          align: \"center\",\n          gutterBottom: true,\n          children: \"Explore top-rated movies and personalized recommendations.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          value: selectedGenre,\n          onChange: handleGenreChange,\n          indicatorColor: \"primary\",\n          textColor: \"primary\",\n          variant: \"scrollable\",\n          scrollButtons: \"auto\",\n          sx: {\n            mt: 4\n          },\n          children: genres.map(genre => /*#__PURE__*/_jsxDEV(Tab, {\n            label: genre,\n            value: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          sx: {\n            mt: 4\n          },\n          children: [\"Top 10 Movies \", selectedGenre !== 'All' && `in ${selectedGenre}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          ref: scrollableContainerRef,\n          sx: {\n            display: 'flex',\n            overflowX: 'auto',\n            gap: 2,\n            padding: 2,\n            '&::-webkit-scrollbar': {\n              display: 'one'\n            }\n          },\n          children: topMovies.length > 0 ? topMovies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              minWidth: 300,\n              cursor: 'pointer'\n            },\n            onClick: () => handleCardClick(movie.movieid),\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              component: \"img\",\n              height: \"300\",\n              image: movie.poster_link || 'https://media.istockphoto.com/id/1396814518/vector/image-coming-soon-no-photo-no-thumbnail-image-available-vector-illustration.jpg?s=612x612&w=0&k=20&c=hnh2OZgQGhf0b46-J2z7aHbIWwq8HNlSDaNp2wn_iko=' // Placeholder if no poster link\n              ,\n              alt: movie.title,\n              sx: {\n                objectFit: 'cover',\n                // Ensures the poster covers the container without distortion\n                width: '100%' // Make sure the width fits the container\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  borderRadius: '5px',\n                  textAlign: 'center'\n                },\n                children: movie.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                sx: {\n                  borderRadius: '5px',\n                  textAlign: 'center'\n                },\n                children: [\"Rating: \", movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)]\n          }, movie.movieid, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n            children: error || 'Loading top movies...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  };\n  _s(fetchMovies, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n}\n_s2(HomePage, \"NvKwEQsRqzlF7lAbO2c/a3PTNm8=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useEffect","useState","useRef","useNavigate","Container","Box","Divider","Tab","Tabs","Typography","Grid","Card","CardMedia","CardContent","jsxDEV","_jsxDEV","config","require","HomePage","_s2","_s","$RefreshSig$","topMovies","setTopMovies","genres","setGenres","selectedGenre","setSelectedGenre","error","setError","navigate","scrollableContainerRef","fetchMovies","genre","route","server_host","server_port","response","fetch","data","json","ok","Error","moviesWithPosters","Promise","all","map","movie","tmdbid","tmdbResponse","Math","trunc","TMDB_API_KEY","tmdbData","poster_path","poster_link","err","console","log","current","scrollLeft","handleGenreChange","event","newValue","handleCardClick","movieID","sx","backgroundImage","backgroundSize","backgroundPosition","minHeight","color","padding","children","variant","gutterBottom","align","mt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","indicatorColor","textColor","scrollButtons","label","ref","display","overflowX","gap","length","minWidth","cursor","onClick","movieid","component","height","image","alt","title","objectFit","width","borderRadius","textAlign","average_rating","parseFloat","toFixed","_c","$RefreshReg$"],"sources":["/Users/ccy/CIS550_Group15_Movie/client/src/pages/HomePage.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Box, Divider, Tab, Tabs, Typography, Grid, Card, CardMedia, CardContent } from '@mui/material';\nconst config = require('../config.json');\n\nexport default function HomePage() {\n  const [topMovies, setTopMovies] = useState([]);\n  const [genres, setGenres] = useState(['All', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']);\n  const [selectedGenre, setSelectedGenre] = useState('All');\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const scrollableContainerRef = useRef(null);\n\n  // Fetch the top 10 movies or movies by genre\n  const fetchMovies = async (genre) => {\n    const route =\n      genre === 'All'\n        ? `http://${config.server_host}:${config.server_port}/top10movies`\n        : `http://${config.server_host}:${config.server_port}/top10bygenre/${genre}`;\n\n    try {\n      const response = await fetch(route);\n      const data = response.json();\n\n      if (!response.ok) {\n        throw new Error('Error fetching movies');\n      }\n\n      // Fetch posters for each movie\n      const moviesWithPosters = await Promise.all(\n        data.map(async (movie) => {\n          if (movie.tmdbid) {\n            try {\n              const tmdbResponse = await fetch(\n                `https://api.themoviedb.org/3/movie/${Math.trunc(movie.tmdbid)}?api_key=${config.TMDB_API_KEY}`\n              );\n              const tmdbData = await tmdbResponse.json();\n              if (tmdbData.poster_path) {\n                movie.poster_link = `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}`;\n              }\n            } catch (err) {\n              console.log(`Error fetching poster for TMDB ID ${movie.tmdbid}:`, err);\n            }\n          }\n          return movie;\n        })\n      );\n      setTopMovies(moviesWithPosters);\n      setError(null);\n    } catch (err) {\n      setError('Error fetching movies');\n      console.error(err);\n    }\n\n    // Fetch movies on component mount or when the selected genre changes\n    useEffect(() => {\n      fetchMovies(selectedGenre);\n      // Reset scroll position to the start\n      if (scrollableContainerRef.current) {\n        scrollableContainerRef.current.scrollLeft = 0;\n      }\n    }, [selectedGenre]);\n\n    const handleGenreChange = (event, newValue) => {\n      setSelectedGenre(newValue);\n    };\n\n    const handleCardClick = (movieID) => {\n      navigate(`/movie/${movieID}`);\n    };\n\n    return (\n      <Box\n        sx={{\n          backgroundImage: 'url(https://images.unsplash.com/photo-1615383915140-a893a0e95d32?q=80&w=2045&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          minHeight: '100vh',\n          color: 'white',\n          padding: 4,\n        }}\n      >\n        <Container>\n          {/* Hero Section */}\n          <Typography variant=\"h3\" gutterBottom align=\"center\" sx={{ mt: 4 }}>\n            Discover Your Next Favorite Movie\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n            Explore top-rated movies and personalized recommendations.\n          </Typography>\n\n          {/* Genre Tabs */}\n          <Tabs\n            value={selectedGenre}\n            onChange={handleGenreChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            sx={{ mt: 4 }}\n          >\n            {genres.map((genre) => (\n              <Tab key={genre} label={genre} value={genre} />\n            ))}\n          </Tabs>\n\n          {/* Horizontal Scrollable Movies Section */}\n          <Typography variant=\"h4\" gutterBottom sx={{ mt: 4 }}>\n            Top 10 Movies {selectedGenre !== 'All' && `in ${selectedGenre}`}\n          </Typography>\n          <Box\n            ref={scrollableContainerRef}\n            sx={{\n              display: 'flex',\n              overflowX: 'auto',\n              gap: 2,\n              padding: 2,\n              '&::-webkit-scrollbar': {\n                display: 'one',\n              },\n            }}\n          >\n            {topMovies.length > 0 ? (\n              topMovies.map((movie) => (\n                <Card\n                  key={movie.movieid}\n                  sx={{\n                    minWidth: 300,\n                    cursor: 'pointer',\n                  }}\n                  onClick={() => handleCardClick(movie.movieid)}\n                >\n                  {/* Movie Poster */}\n                  <CardMedia\n                    component=\"img\"\n                    height=\"300\"\n                    image={movie.poster_link || 'https://media.istockphoto.com/id/1396814518/vector/image-coming-soon-no-photo-no-thumbnail-image-available-vector-illustration.jpg?s=612x612&w=0&k=20&c=hnh2OZgQGhf0b46-J2z7aHbIWwq8HNlSDaNp2wn_iko='} // Placeholder if no poster link\n                    alt={movie.title}\n                    sx={{\n                      objectFit: 'cover', // Ensures the poster covers the container without distortion\n                      width: '100%', // Make sure the width fits the container\n                    }}\n                  />\n\n                  {/* <CardContent>\n                  <Typography variant=\"h6\">{movie.title}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Rating: {movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A'}\n                  </Typography>\n                </CardContent> */}\n\n                  <CardContent>\n                    <Typography variant=\"h6\"\n                      sx={{ borderRadius: '5px', textAlign: 'center' }}>{movie.title}</Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\"\n                      sx={{ borderRadius: '5px', textAlign: 'center' }}>\n                      Rating: {movie.average_rating ? parseFloat(movie.average_rating).toFixed(1) : 'N/A'}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <Typography>{error || 'Loading top movies...'}</Typography>\n            )}\n          </Box>\n        </Container>\n      </Box>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}